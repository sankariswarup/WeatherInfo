#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WeatherInfo.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="NFLDBContext-20140711130424")]
	public partial class NFLDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertPlayer(Player instance);
    partial void UpdatePlayer(Player instance);
    partial void DeletePlayer(Player instance);
    partial void InsertStatistics(Statistics instance);
    partial void UpdateStatistics(Statistics instance);
    partial void DeleteStatistics(Statistics instance);
    partial void InsertTeam(Team instance);
    partial void UpdateTeam(Team instance);
    partial void DeleteTeam(Team instance);
    partial void InsertImage(Image instance);
    partial void UpdateImage(Image instance);
    partial void DeleteImage(Image instance);
    #endregion
		
		public NFLDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["NFLDBContext_20140711130424ConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public NFLDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public NFLDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public NFLDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public NFLDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Player> Players
		{
			get
			{
				return this.GetTable<Player>();
			}
		}
		
		public System.Data.Linq.Table<Statistics> Statistics
		{
			get
			{
				return this.GetTable<Statistics>();
			}
		}
		
		public System.Data.Linq.Table<Team> Teams
		{
			get
			{
				return this.GetTable<Team>();
			}
		}
		
		public System.Data.Linq.Table<Image> Images
		{
			get
			{
				return this.GetTable<Image>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Players")]
	public partial class Player : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PlayerId;
		
		private string _PlayerPoS;
		
		private string _PlayerNumber;
		
		private string _PlayerName;
		
		private string _PlayerStatus;
		
		private int _statisticsId;
		
		private int _ImageId;
		
		private EntitySet<Image> _Images;
		
		private EntityRef<Statistics> _Statistics;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlayerIdChanging(int value);
    partial void OnPlayerIdChanged();
    partial void OnPlayerPoSChanging(string value);
    partial void OnPlayerPoSChanged();
    partial void OnPlayerNumberChanging(string value);
    partial void OnPlayerNumberChanged();
    partial void OnPlayerNameChanging(string value);
    partial void OnPlayerNameChanged();
    partial void OnPlayerStatusChanging(string value);
    partial void OnPlayerStatusChanged();
    partial void OnstatisticsIdChanging(int value);
    partial void OnstatisticsIdChanged();
    partial void OnImageIdChanging(int value);
    partial void OnImageIdChanged();
    #endregion
		
		public Player()
		{
			this._Images = new EntitySet<Image>(new Action<Image>(this.attach_Images), new Action<Image>(this.detach_Images));
			this._Statistics = default(EntityRef<Statistics>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PlayerId
		{
			get
			{
				return this._PlayerId;
			}
			set
			{
				if ((this._PlayerId != value))
				{
					this.OnPlayerIdChanging(value);
					this.SendPropertyChanging();
					this._PlayerId = value;
					this.SendPropertyChanged("PlayerId");
					this.OnPlayerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerPoS", DbType="NVarChar(MAX)")]
		public string PlayerPoS
		{
			get
			{
				return this._PlayerPoS;
			}
			set
			{
				if ((this._PlayerPoS != value))
				{
					this.OnPlayerPoSChanging(value);
					this.SendPropertyChanging();
					this._PlayerPoS = value;
					this.SendPropertyChanged("PlayerPoS");
					this.OnPlayerPoSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerNumber", DbType="NVarChar(MAX)")]
		public string PlayerNumber
		{
			get
			{
				return this._PlayerNumber;
			}
			set
			{
				if ((this._PlayerNumber != value))
				{
					this.OnPlayerNumberChanging(value);
					this.SendPropertyChanging();
					this._PlayerNumber = value;
					this.SendPropertyChanged("PlayerNumber");
					this.OnPlayerNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerName", DbType="NVarChar(MAX)")]
		public string PlayerName
		{
			get
			{
				return this._PlayerName;
			}
			set
			{
				if ((this._PlayerName != value))
				{
					this.OnPlayerNameChanging(value);
					this.SendPropertyChanging();
					this._PlayerName = value;
					this.SendPropertyChanged("PlayerName");
					this.OnPlayerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerStatus", DbType="NVarChar(MAX)")]
		public string PlayerStatus
		{
			get
			{
				return this._PlayerStatus;
			}
			set
			{
				if ((this._PlayerStatus != value))
				{
					this.OnPlayerStatusChanging(value);
					this.SendPropertyChanging();
					this._PlayerStatus = value;
					this.SendPropertyChanged("PlayerStatus");
					this.OnPlayerStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_statisticsId", DbType="Int NOT NULL")]
		public int statisticsId
		{
			get
			{
				return this._statisticsId;
			}
			set
			{
				if ((this._statisticsId != value))
				{
					if (this._Statistics.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstatisticsIdChanging(value);
					this.SendPropertyChanging();
					this._statisticsId = value;
					this.SendPropertyChanged("statisticsId");
					this.OnstatisticsIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageId")]
		public int ImageId
		{
			get
			{
				return this._ImageId;
			}
			set
			{
				if ((this._ImageId != value))
				{
					this.OnImageIdChanging(value);
					this.SendPropertyChanging();
					this._ImageId = value;
					this.SendPropertyChanged("ImageId");
					this.OnImageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_Image", Storage="_Images", ThisKey="ImageId", OtherKey="ImageId")]
		public EntitySet<Image> Images
		{
			get
			{
				return this._Images;
			}
			set
			{
				this._Images.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Statistics_Player", Storage="_Statistics", ThisKey="statisticsId", OtherKey="StatisticsId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Statistics Statistics
		{
			get
			{
				return this._Statistics.Entity;
			}
			set
			{
				Statistics previousValue = this._Statistics.Entity;
				if (((previousValue != value) 
							|| (this._Statistics.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Statistics.Entity = null;
						previousValue.Players.Remove(this);
					}
					this._Statistics.Entity = value;
					if ((value != null))
					{
						value.Players.Add(this);
						this._statisticsId = value.StatisticsId;
					}
					else
					{
						this._statisticsId = default(int);
					}
					this.SendPropertyChanged("Statistics");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Images(Image entity)
		{
			this.SendPropertyChanging();
			entity.Player = this;
		}
		
		private void detach_Images(Image entity)
		{
			this.SendPropertyChanging();
			entity.Player = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Statistics]")]
	public partial class Statistics : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StatisticsId;
		
		private string _TeamOrPlayer;
		
		private string _Wins;
		
		private string _Losses;
		
		private string _Rank;
		
		private EntitySet<Player> _Players;
		
		private EntitySet<Team> _Teams;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStatisticsIdChanging(int value);
    partial void OnStatisticsIdChanged();
    partial void OnTeamOrPlayerChanging(string value);
    partial void OnTeamOrPlayerChanged();
    partial void OnWinsChanging(string value);
    partial void OnWinsChanged();
    partial void OnLossesChanging(string value);
    partial void OnLossesChanged();
    partial void OnRankChanging(string value);
    partial void OnRankChanged();
    #endregion
		
		public Statistics()
		{
			this._Players = new EntitySet<Player>(new Action<Player>(this.attach_Players), new Action<Player>(this.detach_Players));
			this._Teams = new EntitySet<Team>(new Action<Team>(this.attach_Teams), new Action<Team>(this.detach_Teams));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatisticsId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StatisticsId
		{
			get
			{
				return this._StatisticsId;
			}
			set
			{
				if ((this._StatisticsId != value))
				{
					this.OnStatisticsIdChanging(value);
					this.SendPropertyChanging();
					this._StatisticsId = value;
					this.SendPropertyChanged("StatisticsId");
					this.OnStatisticsIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamOrPlayer", DbType="NVarChar(MAX)")]
		public string TeamOrPlayer
		{
			get
			{
				return this._TeamOrPlayer;
			}
			set
			{
				if ((this._TeamOrPlayer != value))
				{
					this.OnTeamOrPlayerChanging(value);
					this.SendPropertyChanging();
					this._TeamOrPlayer = value;
					this.SendPropertyChanged("TeamOrPlayer");
					this.OnTeamOrPlayerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Wins", DbType="NVarChar(MAX)")]
		public string Wins
		{
			get
			{
				return this._Wins;
			}
			set
			{
				if ((this._Wins != value))
				{
					this.OnWinsChanging(value);
					this.SendPropertyChanging();
					this._Wins = value;
					this.SendPropertyChanged("Wins");
					this.OnWinsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Losses", DbType="NVarChar(MAX)")]
		public string Losses
		{
			get
			{
				return this._Losses;
			}
			set
			{
				if ((this._Losses != value))
				{
					this.OnLossesChanging(value);
					this.SendPropertyChanging();
					this._Losses = value;
					this.SendPropertyChanged("Losses");
					this.OnLossesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rank", DbType="NVarChar(MAX)")]
		public string Rank
		{
			get
			{
				return this._Rank;
			}
			set
			{
				if ((this._Rank != value))
				{
					this.OnRankChanging(value);
					this.SendPropertyChanging();
					this._Rank = value;
					this.SendPropertyChanged("Rank");
					this.OnRankChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Statistics_Player", Storage="_Players", ThisKey="StatisticsId", OtherKey="statisticsId")]
		public EntitySet<Player> Players
		{
			get
			{
				return this._Players;
			}
			set
			{
				this._Players.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Statistics_Team", Storage="_Teams", ThisKey="StatisticsId", OtherKey="statisticsId")]
		public EntitySet<Team> Teams
		{
			get
			{
				return this._Teams;
			}
			set
			{
				this._Teams.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Players(Player entity)
		{
			this.SendPropertyChanging();
			entity.Statistics = this;
		}
		
		private void detach_Players(Player entity)
		{
			this.SendPropertyChanging();
			entity.Statistics = null;
		}
		
		private void attach_Teams(Team entity)
		{
			this.SendPropertyChanging();
			entity.Statistics = this;
		}
		
		private void detach_Teams(Team entity)
		{
			this.SendPropertyChanging();
			entity.Statistics = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Teams")]
	public partial class Team : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TeamId;
		
		private string _TeamPoS;
		
		private string _TeamNumber;
		
		private string _TeamName;
		
		private string _TeamStatus;
		
		private int _statisticsId;
		
		private int _PlayerId;
		
		private EntityRef<Statistics> _Statistics;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTeamIdChanging(int value);
    partial void OnTeamIdChanged();
    partial void OnTeamPoSChanging(string value);
    partial void OnTeamPoSChanged();
    partial void OnTeamNumberChanging(string value);
    partial void OnTeamNumberChanged();
    partial void OnTeamNameChanging(string value);
    partial void OnTeamNameChanged();
    partial void OnTeamStatusChanging(string value);
    partial void OnTeamStatusChanged();
    partial void OnstatisticsIdChanging(int value);
    partial void OnstatisticsIdChanged();
    partial void OnPlayerIdChanging(int value);
    partial void OnPlayerIdChanged();
    #endregion
		
		public Team()
		{
			this._Statistics = default(EntityRef<Statistics>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TeamId
		{
			get
			{
				return this._TeamId;
			}
			set
			{
				if ((this._TeamId != value))
				{
					this.OnTeamIdChanging(value);
					this.SendPropertyChanging();
					this._TeamId = value;
					this.SendPropertyChanged("TeamId");
					this.OnTeamIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamPoS", DbType="NVarChar(MAX)")]
		public string TeamPoS
		{
			get
			{
				return this._TeamPoS;
			}
			set
			{
				if ((this._TeamPoS != value))
				{
					this.OnTeamPoSChanging(value);
					this.SendPropertyChanging();
					this._TeamPoS = value;
					this.SendPropertyChanged("TeamPoS");
					this.OnTeamPoSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamNumber", DbType="NVarChar(MAX)")]
		public string TeamNumber
		{
			get
			{
				return this._TeamNumber;
			}
			set
			{
				if ((this._TeamNumber != value))
				{
					this.OnTeamNumberChanging(value);
					this.SendPropertyChanging();
					this._TeamNumber = value;
					this.SendPropertyChanged("TeamNumber");
					this.OnTeamNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamName", DbType="NVarChar(MAX)")]
		public string TeamName
		{
			get
			{
				return this._TeamName;
			}
			set
			{
				if ((this._TeamName != value))
				{
					this.OnTeamNameChanging(value);
					this.SendPropertyChanging();
					this._TeamName = value;
					this.SendPropertyChanged("TeamName");
					this.OnTeamNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamStatus", DbType="NVarChar(MAX)")]
		public string TeamStatus
		{
			get
			{
				return this._TeamStatus;
			}
			set
			{
				if ((this._TeamStatus != value))
				{
					this.OnTeamStatusChanging(value);
					this.SendPropertyChanging();
					this._TeamStatus = value;
					this.SendPropertyChanged("TeamStatus");
					this.OnTeamStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_statisticsId", DbType="Int NOT NULL")]
		public int statisticsId
		{
			get
			{
				return this._statisticsId;
			}
			set
			{
				if ((this._statisticsId != value))
				{
					if (this._Statistics.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstatisticsIdChanging(value);
					this.SendPropertyChanging();
					this._statisticsId = value;
					this.SendPropertyChanged("statisticsId");
					this.OnstatisticsIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerId", DbType="Int NOT NULL")]
		public int PlayerId
		{
			get
			{
				return this._PlayerId;
			}
			set
			{
				if ((this._PlayerId != value))
				{
					this.OnPlayerIdChanging(value);
					this.SendPropertyChanging();
					this._PlayerId = value;
					this.SendPropertyChanged("PlayerId");
					this.OnPlayerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Statistics_Team", Storage="_Statistics", ThisKey="statisticsId", OtherKey="StatisticsId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Statistics Statistics
		{
			get
			{
				return this._Statistics.Entity;
			}
			set
			{
				Statistics previousValue = this._Statistics.Entity;
				if (((previousValue != value) 
							|| (this._Statistics.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Statistics.Entity = null;
						previousValue.Teams.Remove(this);
					}
					this._Statistics.Entity = value;
					if ((value != null))
					{
						value.Teams.Add(this);
						this._statisticsId = value.StatisticsId;
					}
					else
					{
						this._statisticsId = default(int);
					}
					this.SendPropertyChanged("Statistics");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Images")]
	public partial class Image : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ImageId;
		
		private string _ImageName;
		
		private string _ImageAlt;
		
		private string _ContentType;
		
		private byte[] _ImageData;
		
		private EntityRef<Player> _Player;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnImageIdChanging(int value);
    partial void OnImageIdChanged();
    partial void OnImageNameChanging(string value);
    partial void OnImageNameChanged();
    partial void OnImageAltChanging(string value);
    partial void OnImageAltChanged();
    partial void OnContentTypeChanging(string value);
    partial void OnContentTypeChanged();
    partial void OnImageDataChanging(byte[] value);
    partial void OnImageDataChanged();
    #endregion
		
		public Image()
		{
			this._Player = default(EntityRef<Player>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ImageId
		{
			get
			{
				return this._ImageId;
			}
			set
			{
				if ((this._ImageId != value))
				{
					if (this._Player.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnImageIdChanging(value);
					this.SendPropertyChanging();
					this._ImageId = value;
					this.SendPropertyChanged("ImageId");
					this.OnImageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageName", DbType="NVarChar(MAX)")]
		public string ImageName
		{
			get
			{
				return this._ImageName;
			}
			set
			{
				if ((this._ImageName != value))
				{
					this.OnImageNameChanging(value);
					this.SendPropertyChanging();
					this._ImageName = value;
					this.SendPropertyChanged("ImageName");
					this.OnImageNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageAlt", DbType="NVarChar(MAX)")]
		public string ImageAlt
		{
			get
			{
				return this._ImageAlt;
			}
			set
			{
				if ((this._ImageAlt != value))
				{
					this.OnImageAltChanging(value);
					this.SendPropertyChanging();
					this._ImageAlt = value;
					this.SendPropertyChanged("ImageAlt");
					this.OnImageAltChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContentType", DbType="NVarChar(MAX)")]
		public string ContentType
		{
			get
			{
				return this._ContentType;
			}
			set
			{
				if ((this._ContentType != value))
				{
					this.OnContentTypeChanging(value);
					this.SendPropertyChanging();
					this._ContentType = value;
					this.SendPropertyChanged("ContentType");
					this.OnContentTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageData", CanBeNull=false)]
		public byte[] ImageData
		{
			get
			{
				return this._ImageData;
			}
			set
			{
				if ((this._ImageData != value))
				{
					this.OnImageDataChanging(value);
					this.SendPropertyChanging();
					this._ImageData = value;
					this.SendPropertyChanged("ImageData");
					this.OnImageDataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_Image", Storage="_Player", ThisKey="ImageId", OtherKey="ImageId", IsForeignKey=true)]
		public Player Player
		{
			get
			{
				return this._Player.Entity;
			}
			set
			{
				Player previousValue = this._Player.Entity;
				if (((previousValue != value) 
							|| (this._Player.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Player.Entity = null;
						previousValue.Images.Remove(this);
					}
					this._Player.Entity = value;
					if ((value != null))
					{
						value.Images.Add(this);
						this._ImageId = value.ImageId;
					}
					else
					{
						this._ImageId = default(int);
					}
					this.SendPropertyChanged("Player");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591

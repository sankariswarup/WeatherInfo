//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WeatherInfo.Models
{
    using System;
    using System.ComponentModel.DataAnnotations;
    using System.Collections.Generic;
    
    public partial class Prize
    {
        [Required]
        public string Name { get; set; }
        [DisplayFormat(ApplyFormatInEditMode = true, DataFormatString = "{0:yyyy-MM-dd}")]
        [Required]
        [DataType(DataType.Date)]
        [DateLessThan("BirthDate")]
        public System.DateTime BirthDate { get; set; } 
        [Required]
        [EmailAddress]
        public string Email { get; set; }
    }
    public sealed class DateLessThanAttribute : ValidationAttribute  
    {  
        private const string _defaultErrorMessage = "Birth Date must be less than ten years from current date";  
        private string _basePropertyName;  

       public DateLessThanAttribute(string basePropertyName) : base(_defaultErrorMessage)  
    {  
            _basePropertyName = basePropertyName;  
        }  
   
        //Override default FormatErrorMessage Method  
       public override string FormatErrorMessage(string name)  
       {  
            return string.Format(_defaultErrorMessage, name, _basePropertyName);  
        }  
  
        //Override IsValid  
        protected override ValidationResult IsValid(object value, ValidationContext validationContext)  
        {  
            //Get PropertyInfo Object  
            var basePropertyInfo = validationContext.ObjectType.GetProperty(_basePropertyName);  
   
            //Get Value of the property  
            var BirthDate = (DateTime)basePropertyInfo.GetValue(validationContext.ObjectInstance, null);
            int result = DateTime.Compare(BirthDate, DateTime.Now.AddYears(-10));

            //Actual comparision  
            if (result > 0)  
            {  
                var message = FormatErrorMessage(validationContext.DisplayName);  
                return new ValidationResult(message);  
            }  
   
            //Default return - This means there were no validation error  
            return null;  
        }  
   
    }  
  

}
